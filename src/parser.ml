type token =
  | EOF
  | CALLBACK
  | INTERFACE
  | LBRACE
  | RBRACE
  | SEMI
  | PARTIAL
  | IDENTIFIER of (string)
  | DICTIONARY
  | EQUAL
  | STRING of (string)
  | EXCEPTION
  | COLON
  | COMMA
  | ENUM
  | LRBRACKET
  | RRBRACKET
  | TYPEDEF
  | IMPLEMENTS
  | CONST
  | INTEGER of (int)
  | NULL
  | TRUE
  | FALSE
  | FLOAT of (float)
  | MINUS
  | INFINITY
  | NAN
  | STRINGIFIER
  | ATTRIBUTE
  | INHERIT
  | READONLY
  | GETTER
  | SETTER
  | CREATOR
  | DELETER
  | LEGACYCALLER
  | OPTIONAL
  | ELLIPSIS
  | LSBRACKET
  | RSBRACKET
  | OTHER of (string)
  | DOT
  | LESS
  | GREATER
  | QUESTION
  | DATE
  | DOMSTRING
  | ANY
  | BOOLEAN
  | BYTE
  | DOUBLE
  | FLOAT_TYPE
  | LONG
  | OBJECT
  | OCTET
  | OR
  | SEQUENCE
  | SHORT
  | UNSIGNED
  | VOID
  | UNRESTRICTED
  | STATIC

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open Ast

# 73 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* CALLBACK *);
  258 (* INTERFACE *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* SEMI *);
  262 (* PARTIAL *);
  264 (* DICTIONARY *);
  265 (* EQUAL *);
  267 (* EXCEPTION *);
  268 (* COLON *);
  269 (* COMMA *);
  270 (* ENUM *);
  271 (* LRBRACKET *);
  272 (* RRBRACKET *);
  273 (* TYPEDEF *);
  274 (* IMPLEMENTS *);
  275 (* CONST *);
  277 (* NULL *);
  278 (* TRUE *);
  279 (* FALSE *);
  281 (* MINUS *);
  282 (* INFINITY *);
  283 (* NAN *);
  284 (* STRINGIFIER *);
  285 (* ATTRIBUTE *);
  286 (* INHERIT *);
  287 (* READONLY *);
  288 (* GETTER *);
  289 (* SETTER *);
  290 (* CREATOR *);
  291 (* DELETER *);
  292 (* LEGACYCALLER *);
  293 (* OPTIONAL *);
  294 (* ELLIPSIS *);
  295 (* LSBRACKET *);
  296 (* RSBRACKET *);
  298 (* DOT *);
  299 (* LESS *);
  300 (* GREATER *);
  301 (* QUESTION *);
  302 (* DATE *);
  303 (* DOMSTRING *);
  304 (* ANY *);
  305 (* BOOLEAN *);
  306 (* BYTE *);
  307 (* DOUBLE *);
  308 (* FLOAT_TYPE *);
  309 (* LONG *);
  310 (* OBJECT *);
  311 (* OCTET *);
  312 (* OR *);
  313 (* SEQUENCE *);
  314 (* SHORT *);
  315 (* UNSIGNED *);
  316 (* VOID *);
  317 (* UNRESTRICTED *);
  318 (* STATIC *);
    0|]

let yytransl_block = [|
  263 (* IDENTIFIER *);
  266 (* STRING *);
  276 (* INTEGER *);
  280 (* FLOAT *);
  297 (* OTHER *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\004\000\011\000\011\000\012\000\005\000\016\000\
\016\000\017\000\015\000\015\000\019\000\019\000\006\000\022\000\
\022\000\023\000\018\000\025\000\025\000\026\000\026\000\007\000\
\028\000\028\000\014\000\014\000\008\000\030\000\031\000\031\000\
\013\000\009\000\010\000\020\000\027\000\027\000\027\000\027\000\
\035\000\035\000\036\000\036\000\036\000\036\000\021\000\021\000\
\021\000\037\000\037\000\037\000\038\000\041\000\041\000\042\000\
\042\000\039\000\043\000\043\000\044\000\044\000\045\000\045\000\
\045\000\045\000\045\000\040\000\046\000\046\000\033\000\033\000\
\048\000\048\000\047\000\049\000\049\000\050\000\050\000\051\000\
\051\000\029\000\029\000\053\000\002\000\002\000\055\000\055\000\
\054\000\054\000\054\000\054\000\057\000\057\000\056\000\056\000\
\056\000\056\000\056\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\059\000\059\000\024\000\024\000\060\000\060\000\061\000\
\061\000\064\000\064\000\064\000\065\000\065\000\063\000\063\000\
\063\000\063\000\063\000\063\000\034\000\034\000\066\000\066\000\
\066\000\066\000\066\000\069\000\069\000\070\000\070\000\068\000\
\068\000\071\000\071\000\072\000\072\000\062\000\062\000\062\000\
\073\000\073\000\067\000\067\000\032\000\032\000\074\000\075\000\
\076\000\077\000\000\000"

let yylen = "\002\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\001\000\001\000\007\000\002\000\001\000\
\001\000\006\000\000\000\003\000\001\000\001\000\007\000\000\000\
\003\000\004\000\005\000\000\000\002\000\001\000\001\000\007\000\
\000\000\003\000\000\000\002\000\006\000\002\000\000\000\003\000\
\007\000\005\000\004\000\006\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\001\000\006\000\000\000\001\000\000\000\
\001\000\002\000\001\000\001\000\000\000\002\000\001\000\001\000\
\001\000\001\000\001\000\006\000\000\000\001\000\000\000\002\000\
\000\000\003\000\002\000\004\000\003\000\001\000\001\000\000\000\
\001\000\001\000\001\000\003\000\000\000\004\000\000\000\003\000\
\004\000\004\000\004\000\002\000\000\000\001\000\000\000\004\000\
\004\000\004\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\001\000\004\000\000\000\
\006\000\001\000\002\000\004\000\000\000\003\000\002\000\002\000\
\002\000\005\000\002\000\002\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\001\000\002\000\
\001\000\001\000\002\000\000\000\001\000\000\000\002\000\003\000\
\000\000\003\000\000\000\001\000\001\000\001\000\001\000\004\000\
\003\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\211\000\000\000\144\000\154\000\
\000\000\116\000\156\000\110\000\148\000\118\000\111\000\150\000\
\115\000\149\000\000\000\160\000\152\000\145\000\108\000\132\000\
\139\000\129\000\109\000\113\000\123\000\124\000\159\000\143\000\
\153\000\151\000\157\000\146\000\147\000\155\000\136\000\000\000\
\112\000\114\000\117\000\119\000\120\000\121\000\122\000\125\000\
\126\000\127\000\128\000\130\000\131\000\133\000\134\000\135\000\
\137\000\138\000\140\000\141\000\161\000\158\000\142\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\005\000\006\000\007\000\008\000\
\009\000\011\000\000\000\163\000\000\000\000\000\000\000\162\000\
\000\000\000\000\000\000\000\000\000\000\102\000\100\000\000\000\
\010\000\013\000\012\000\000\000\000\000\000\000\015\000\016\000\
\017\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\107\000\000\000\000\000\000\000\094\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\190\000\000\000\000\000\000\000\185\000\
\186\000\191\000\000\000\000\000\187\000\000\000\194\000\000\000\
\000\000\000\000\164\000\000\000\166\000\000\000\183\000\184\000\
\189\000\193\000\000\000\000\000\000\000\099\000\097\000\098\000\
\096\000\206\000\205\000\000\000\036\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\177\000\
\000\000\000\000\170\000\000\000\180\000\176\000\000\000\197\000\
\195\000\179\000\000\000\192\000\188\000\000\000\165\000\175\000\
\106\000\104\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\000\000\199\000\000\000\171\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\063\000\071\000\072\000\
\073\000\074\000\075\000\067\000\000\000\021\000\022\000\056\000\
\057\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\090\000\000\000\000\000\091\000\000\000\
\000\000\037\000\200\000\000\000\000\000\000\000\167\000\000\000\
\000\000\000\000\083\000\000\000\000\000\080\000\000\000\000\000\
\000\000\060\000\000\000\055\000\058\000\059\000\020\000\065\000\
\000\000\066\000\070\000\014\000\018\000\025\000\000\000\023\000\
\000\000\034\000\032\000\040\000\202\000\172\000\000\000\000\000\
\204\000\178\000\000\000\089\000\000\000\041\000\000\000\182\000\
\000\000\181\000\078\000\000\000\000\000\000\000\000\000\092\000\
\000\000\169\000\087\000\000\000\086\000\085\000\082\000\000\000\
\000\000\000\000\031\000\047\000\048\000\049\000\050\000\051\000\
\000\000\053\000\054\000\029\000\030\000\045\000\046\000\026\000\
\174\000\084\000\000\000\000\000\000\000\052\000\044\000\000\000\
\061\000\076\000"

let yydgoto = "\002\000\
\005\000\197\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\097\000\082\000\099\000\123\000\198\000\103\000\
\104\000\105\000\229\000\230\000\231\000\201\000\240\000\163\000\
\047\001\068\001\069\001\204\000\246\000\173\000\206\000\011\001\
\218\000\008\001\070\001\071\001\012\001\232\000\233\000\014\001\
\234\000\017\001\235\000\236\000\237\000\044\001\219\000\006\001\
\003\001\052\001\037\001\063\000\247\000\094\000\093\000\087\000\
\095\000\088\000\089\000\147\000\148\000\176\000\149\000\180\000\
\032\001\150\000\034\001\151\000\152\000\153\000\154\000\185\000\
\210\000\000\000\000\000\000\000\000\000"

let yysindex = "\031\000\
\001\000\000\000\000\000\102\000\000\000\163\002\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\255\
\102\000\063\255\047\255\041\255\090\255\074\255\106\255\117\255\
\086\255\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\040\000\040\000\125\255\000\000\
\040\000\115\255\095\255\102\000\102\255\000\000\000\000\134\255\
\000\000\000\000\000\000\132\255\138\255\143\255\000\000\000\000\
\000\000\154\255\132\255\132\255\159\255\042\003\000\000\160\255\
\147\255\133\255\102\000\000\000\102\000\102\000\071\255\000\000\
\200\002\161\255\171\255\172\255\176\255\175\255\179\255\180\255\
\181\255\229\254\063\003\000\000\229\254\229\254\151\255\000\000\
\000\000\000\000\139\255\229\254\000\000\153\255\000\000\038\255\
\253\254\190\255\000\000\229\254\000\000\229\254\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\186\255\000\000\086\255\086\255\086\255\
\000\000\086\255\086\255\196\255\206\255\173\255\183\255\000\000\
\187\255\229\254\000\000\155\255\000\000\000\000\174\255\000\000\
\000\000\000\000\042\003\000\000\000\000\225\255\000\000\000\000\
\000\000\000\000\000\000\086\255\098\002\208\255\229\255\042\003\
\230\255\231\255\221\002\232\255\228\255\000\000\236\255\229\254\
\202\255\000\000\203\255\000\000\063\003\229\254\200\255\000\000\
\249\002\234\255\238\255\054\002\095\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\255\000\000\000\000\000\000\
\000\000\215\255\200\002\000\000\068\255\242\255\244\255\086\255\
\246\255\000\000\249\255\000\000\248\255\086\255\000\000\251\255\
\196\255\000\000\000\000\229\254\229\254\015\000\000\000\213\255\
\042\003\221\255\000\000\024\000\086\255\000\000\213\255\026\000\
\213\255\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\101\000\000\000\000\000\000\000\000\000\000\000\063\003\099\000\
\000\000\000\000\028\255\000\000\028\255\000\000\238\255\000\000\
\109\000\000\000\000\000\118\000\042\003\131\255\135\000\000\000\
\015\000\000\000\000\000\071\000\000\000\000\000\000\000\250\255\
\086\255\160\000\000\000\000\000\000\000\000\000\000\000\000\000\
\116\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\163\000\153\000\168\000\000\000\000\000\169\000\
\000\000\000\000"

let yyrindex = "\000\000\
\124\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\161\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\140\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\
\010\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\003\124\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\172\000\000\000\161\000\140\000\000\000\000\000\
\067\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\182\000\000\000\000\000\000\000\000\000\
\000\000\000\000\182\000\182\000\000\000\014\255\000\000\000\000\
\000\000\000\000\010\255\000\000\010\255\010\255\144\000\000\000\
\014\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\001\237\254\000\000\022\001\022\001\000\000\000\000\
\000\000\000\000\226\000\022\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\166\001\000\000\022\001\000\000\000\000\
\000\000\000\000\067\255\067\255\067\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\233\255\233\255\040\002\
\000\000\040\002\022\002\183\000\000\000\000\000\074\001\000\000\
\000\000\251\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\170\255\144\002\000\000\000\000\014\255\
\000\000\000\000\014\255\000\000\000\000\000\000\000\000\022\001\
\000\000\000\000\000\000\000\000\255\254\166\001\000\000\000\000\
\205\001\000\000\170\000\000\000\244\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\233\255\000\000\000\000\000\000\
\000\000\162\000\014\255\000\000\172\002\000\000\000\000\040\002\
\000\000\000\000\000\000\000\000\000\000\022\002\000\000\000\000\
\183\000\000\000\000\000\022\001\251\254\173\000\000\000\126\001\
\245\001\104\255\000\000\000\000\164\000\000\000\188\000\000\000\
\188\000\000\000\175\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\198\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\255\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\170\000\000\000\
\000\000\000\000\000\000\000\000\014\255\000\000\000\000\000\000\
\173\000\000\000\000\000\012\255\000\000\000\000\000\000\000\000\
\170\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\130\001\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\139\001\000\000\189\255\105\255\000\000\
\000\000\000\000\000\000\003\001\000\000\091\255\000\000\148\255\
\155\000\000\000\152\000\230\000\000\000\000\000\223\000\103\001\
\174\000\000\000\000\000\000\000\000\000\008\001\000\000\251\000\
\000\000\000\000\000\000\254\000\000\000\000\000\231\000\199\000\
\000\000\202\000\000\000\079\255\000\000\005\000\127\001\247\255\
\207\255\002\000\000\000\000\000\128\255\130\255\129\255\056\255\
\200\000\027\001\121\255\000\000\000\000\105\001\104\001\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1165
let yytable = "\006\000\
\003\000\146\000\178\000\179\000\202\000\065\000\181\000\182\000\
\064\000\090\000\198\000\174\000\254\000\186\000\168\000\199\000\
\062\000\175\000\062\000\168\000\132\000\191\000\101\000\192\000\
\028\000\168\000\168\000\028\000\007\000\008\000\091\000\001\000\
\168\000\011\000\051\001\013\000\168\000\168\000\016\000\127\000\
\128\000\018\000\101\000\168\000\020\000\021\000\022\000\138\000\
\102\000\101\000\198\000\212\000\168\000\100\000\168\000\031\000\
\032\000\033\000\168\000\034\000\035\000\036\000\037\000\038\000\
\067\000\158\000\065\000\159\000\160\000\096\000\103\000\110\000\
\006\000\112\000\022\001\113\000\114\000\015\001\215\000\116\000\
\107\000\251\000\103\000\092\000\178\000\179\000\049\001\255\000\
\061\000\062\000\139\000\241\000\168\000\065\000\245\000\143\000\
\119\000\168\000\168\000\223\000\224\000\225\000\226\000\227\000\
\088\000\088\000\103\000\106\000\002\001\088\000\088\000\088\000\
\108\000\053\001\088\000\053\001\065\000\088\000\065\000\065\000\
\088\000\088\000\088\000\109\000\004\000\029\001\030\001\040\001\
\115\000\042\001\117\000\088\000\088\000\088\000\118\000\088\000\
\088\000\088\000\088\000\088\000\059\001\120\000\121\000\122\000\
\124\000\193\000\194\000\195\000\035\001\125\000\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\178\000\179\000\
\126\000\129\000\156\000\155\000\088\000\088\000\200\000\165\000\
\200\000\203\000\093\000\093\000\157\000\166\000\167\000\093\000\
\093\000\093\000\168\000\169\000\093\000\170\000\171\000\093\000\
\093\000\079\000\093\000\093\000\093\000\183\000\172\000\184\000\
\058\001\093\000\217\000\187\000\190\000\093\000\093\000\093\000\
\196\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\205\000\207\000\213\000\238\000\208\000\214\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\209\000\093\000\093\000\
\093\000\211\000\093\000\093\000\093\000\216\000\093\000\093\000\
\239\000\242\000\243\000\248\000\019\000\249\000\200\000\093\000\
\250\000\252\000\253\000\000\001\203\000\016\001\020\001\093\000\
\021\001\004\001\005\001\093\000\023\001\024\001\025\001\027\001\
\093\000\033\001\036\001\217\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\038\001\093\000\093\000\093\000\
\041\001\093\000\093\000\093\000\093\000\093\000\093\000\004\000\
\007\000\008\000\083\000\043\001\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\084\000\018\000\085\000\217\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\031\001\034\000\
\035\000\036\000\037\000\038\000\039\000\045\001\086\000\046\001\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\007\000\008\000\
\009\000\048\001\010\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\050\001\018\000\019\000\056\001\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\057\001\034\000\035\000\036\000\
\037\000\038\000\039\000\072\001\040\000\078\001\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\093\000\093\000\077\001\079\001\
\080\001\093\000\093\000\093\000\081\001\082\001\093\000\103\000\
\103\000\093\000\093\000\103\000\093\000\093\000\093\000\095\000\
\035\000\081\000\039\000\093\000\173\000\077\000\064\000\093\000\
\093\000\093\000\203\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\028\000\111\000\098\000\244\000\074\001\075\001\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\028\001\
\093\000\093\000\093\000\026\001\093\000\093\000\093\000\164\000\
\093\000\093\000\196\000\196\000\013\001\018\001\076\001\196\000\
\196\000\196\000\019\001\039\001\196\000\055\001\054\001\196\000\
\196\000\196\000\196\000\196\000\196\000\161\000\009\001\188\000\
\073\001\189\000\000\000\000\000\000\000\196\000\196\000\196\000\
\000\000\196\000\196\000\196\000\196\000\196\000\000\000\196\000\
\196\000\000\000\000\000\000\000\000\000\196\000\196\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\198\000\198\000\
\000\000\196\000\000\000\198\000\198\000\198\000\196\000\196\000\
\198\000\000\000\000\000\198\000\198\000\198\000\198\000\198\000\
\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\198\000\198\000\198\000\000\000\198\000\198\000\198\000\
\198\000\198\000\000\000\198\000\000\000\000\000\000\000\000\000\
\000\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\201\000\201\000\000\000\198\000\000\000\201\000\
\201\000\201\000\198\000\198\000\201\000\000\000\000\000\201\000\
\201\000\201\000\201\000\201\000\201\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\201\000\201\000\201\000\
\000\000\201\000\201\000\201\000\201\000\201\000\000\000\201\000\
\000\000\000\000\000\000\000\000\000\000\201\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\203\000\203\000\
\000\000\201\000\000\000\203\000\203\000\203\000\201\000\201\000\
\203\000\000\000\000\000\203\000\203\000\203\000\203\000\203\000\
\203\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\203\000\203\000\203\000\000\000\203\000\203\000\203\000\
\203\000\203\000\000\000\203\000\000\000\000\000\198\000\198\000\
\000\000\203\000\000\000\198\000\198\000\198\000\000\000\000\000\
\198\000\000\000\000\000\198\000\198\000\203\000\198\000\198\000\
\198\000\000\000\203\000\203\000\000\000\000\000\000\000\000\000\
\000\000\198\000\198\000\198\000\000\000\198\000\198\000\198\000\
\198\000\198\000\000\000\198\000\000\000\168\000\168\000\000\000\
\000\000\198\000\168\000\000\000\168\000\000\000\000\000\168\000\
\000\000\000\000\168\000\000\000\000\000\168\000\168\000\168\000\
\000\000\000\000\198\000\198\000\000\000\000\000\000\000\000\000\
\168\000\168\000\168\000\000\000\168\000\168\000\168\000\168\000\
\168\000\000\000\168\000\168\000\000\000\168\000\168\000\000\000\
\000\000\168\000\168\000\000\000\168\000\000\000\000\000\168\000\
\000\000\000\000\168\000\000\000\000\000\168\000\168\000\168\000\
\000\000\000\000\168\000\000\000\000\000\000\000\000\000\000\000\
\168\000\168\000\168\000\000\000\168\000\168\000\168\000\168\000\
\168\000\033\000\000\000\168\000\093\000\000\000\000\000\000\000\
\000\000\168\000\000\000\000\000\093\000\000\000\000\000\000\000\
\093\000\000\000\000\000\024\000\000\000\093\000\093\000\000\000\
\000\000\000\000\168\000\000\000\000\000\000\000\093\000\000\000\
\000\000\000\000\000\000\000\000\007\001\000\000\000\000\093\000\
\000\000\000\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\000\000\093\000\093\000\093\000\132\000\093\000\093\000\
\093\000\000\000\093\000\000\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\000\000\093\000\093\000\093\000\000\000\
\093\000\093\000\093\000\010\001\093\000\130\000\136\000\137\000\
\138\000\000\000\139\000\000\000\141\000\131\000\000\000\143\000\
\144\000\000\000\145\000\000\000\220\000\000\000\132\000\000\000\
\000\000\000\000\000\000\000\000\222\000\221\000\000\000\222\000\
\000\000\223\000\224\000\225\000\226\000\227\000\000\000\000\000\
\000\000\000\000\000\000\000\000\133\000\134\000\135\000\136\000\
\137\000\138\000\000\000\139\000\140\000\141\000\069\000\142\000\
\143\000\144\000\162\000\145\000\000\000\000\000\069\000\228\000\
\000\000\000\000\000\000\066\000\067\000\000\000\000\000\069\000\
\068\000\069\000\070\000\000\000\062\000\071\000\062\000\000\000\
\072\000\000\000\069\000\073\000\000\000\000\000\069\000\000\000\
\000\000\000\000\069\000\000\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\000\000\
\069\000\069\000\069\000\069\000\069\000\000\000\130\000\000\000\
\000\000\000\000\069\000\000\000\000\000\000\000\131\000\000\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\132\000\
\069\000\069\000\069\000\130\000\069\000\069\000\069\000\069\000\
\069\000\000\000\000\000\131\000\000\000\000\000\000\000\220\000\
\000\000\000\000\000\000\000\000\132\000\133\000\134\000\135\000\
\136\000\137\000\138\000\000\000\139\000\140\000\141\000\130\000\
\142\000\143\000\144\000\162\000\145\000\000\000\000\000\131\000\
\000\000\000\000\133\000\134\000\135\000\136\000\137\000\138\000\
\132\000\139\000\140\000\141\000\093\000\142\000\143\000\144\000\
\000\000\145\000\000\000\000\000\093\000\001\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000\133\000\134\000\
\135\000\136\000\137\000\138\000\000\000\139\000\140\000\141\000\
\130\000\142\000\143\000\144\000\000\000\145\000\000\000\000\000\
\131\000\000\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\132\000\093\000\093\000\093\000\130\000\093\000\093\000\
\093\000\000\000\093\000\000\000\000\000\131\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\133\000\
\134\000\135\000\136\000\137\000\138\000\000\000\139\000\140\000\
\141\000\000\000\142\000\143\000\144\000\000\000\145\000\000\000\
\000\000\000\000\000\000\000\000\133\000\134\000\177\000\136\000\
\137\000\138\000\000\000\139\000\140\000\141\000\000\000\142\000\
\143\000\144\000\000\000\145\000\093\000\093\000\000\000\000\000\
\000\000\093\000\093\000\093\000\000\000\000\000\093\000\000\000\
\000\000\093\000\000\000\000\000\093\000"

let yycheck = "\001\000\
\000\000\110\000\131\000\131\000\170\000\004\000\133\000\134\000\
\004\000\019\000\016\001\039\001\213\000\140\000\016\001\167\000\
\029\001\045\001\031\001\039\001\024\001\148\000\013\001\150\000\
\013\001\045\001\039\001\016\001\001\001\002\001\040\000\001\000\
\045\001\006\001\007\001\008\001\056\001\039\001\011\001\107\000\
\108\000\014\001\002\001\045\001\017\001\018\001\019\001\051\001\
\008\001\040\001\056\001\178\000\039\001\007\001\056\001\028\001\
\029\001\030\001\045\001\032\001\033\001\034\001\035\001\036\001\
\002\001\115\000\065\000\117\000\118\000\007\001\004\001\073\000\
\074\000\083\000\240\000\085\000\086\000\229\000\187\000\089\000\
\007\001\208\000\016\001\013\001\213\000\213\000\031\001\214\000\
\061\001\062\001\053\001\200\000\039\001\092\000\203\000\058\001\
\092\000\044\001\045\001\032\001\033\001\034\001\035\001\036\001\
\001\001\002\001\040\001\018\001\217\000\006\001\007\001\008\001\
\007\001\035\001\011\001\037\001\115\000\014\001\117\000\118\000\
\017\001\018\001\019\001\007\001\039\001\252\000\253\000\007\001\
\004\001\009\001\016\001\028\001\029\001\030\001\040\001\032\001\
\033\001\034\001\035\001\036\001\010\001\040\001\009\001\012\001\
\007\001\155\000\156\000\157\000\001\001\007\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\031\001\031\001\
\007\001\003\001\016\001\004\001\061\001\062\001\168\000\007\001\
\170\000\171\000\001\001\002\001\040\001\003\001\003\001\006\001\
\007\001\008\001\003\001\005\001\011\001\003\001\003\001\014\001\
\015\001\016\001\017\001\018\001\019\001\039\001\010\001\053\001\
\045\001\024\001\196\000\043\001\007\001\028\001\029\001\030\001\
\015\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\013\001\004\001\056\001\004\001\040\001\040\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\039\001\053\001\054\001\
\055\001\039\001\057\001\058\001\059\001\005\001\061\001\062\001\
\004\001\004\001\004\001\004\001\004\001\010\001\240\000\007\001\
\005\001\040\001\040\001\044\001\246\000\031\001\005\001\015\001\
\005\001\016\001\013\001\019\001\007\001\005\001\007\001\005\001\
\024\001\045\001\038\001\005\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\005\001\053\001\054\001\055\001\
\007\001\057\001\058\001\059\001\060\001\061\001\062\001\039\001\
\001\001\002\001\003\001\007\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\057\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\056\001\032\001\
\033\001\034\001\035\001\036\001\037\001\029\001\039\001\009\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\001\001\002\001\
\003\001\005\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\016\001\014\001\015\001\009\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\015\001\032\001\033\001\034\001\
\035\001\036\001\037\001\005\001\039\001\026\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\001\001\002\001\007\001\005\001\
\016\001\006\001\007\001\008\001\005\001\005\001\011\001\004\001\
\016\001\014\001\015\001\040\001\017\001\018\001\019\001\040\001\
\003\001\016\001\004\001\024\001\016\001\015\001\029\001\028\001\
\029\001\030\001\007\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\005\001\074\000\066\000\203\000\052\001\056\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\249\000\
\053\001\054\001\055\001\246\000\057\001\058\001\059\001\121\000\
\061\001\062\001\001\001\002\001\221\000\235\000\057\001\006\001\
\007\001\008\001\237\000\005\001\011\001\039\001\037\001\014\001\
\015\001\016\001\017\001\018\001\019\001\119\000\220\000\144\000\
\049\001\145\000\255\255\255\255\255\255\028\001\029\001\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\255\255\038\001\
\039\001\255\255\255\255\255\255\255\255\044\001\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\056\001\255\255\006\001\007\001\008\001\061\001\062\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\255\255\255\255\255\255\
\255\255\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\255\255\056\001\255\255\006\001\
\007\001\008\001\061\001\062\001\011\001\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\255\255\038\001\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\056\001\255\255\006\001\007\001\008\001\061\001\062\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\255\255\001\001\002\001\
\255\255\044\001\255\255\006\001\007\001\008\001\255\255\255\255\
\011\001\255\255\255\255\014\001\015\001\056\001\017\001\018\001\
\019\001\255\255\061\001\062\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\255\255\038\001\255\255\001\001\002\001\255\255\
\255\255\044\001\006\001\255\255\008\001\255\255\255\255\011\001\
\255\255\255\255\014\001\255\255\255\255\017\001\018\001\019\001\
\255\255\255\255\061\001\062\001\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\255\255\032\001\033\001\034\001\035\001\
\036\001\255\255\038\001\039\001\255\255\001\001\002\001\255\255\
\255\255\045\001\006\001\255\255\008\001\255\255\255\255\011\001\
\255\255\255\255\014\001\255\255\255\255\017\001\018\001\019\001\
\255\255\255\255\062\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\255\255\032\001\033\001\034\001\035\001\
\036\001\004\001\255\255\039\001\007\001\255\255\255\255\255\255\
\255\255\045\001\255\255\255\255\015\001\255\255\255\255\255\255\
\019\001\255\255\255\255\004\001\255\255\024\001\007\001\255\255\
\255\255\255\255\062\001\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\007\001\255\255\255\255\024\001\
\255\255\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\053\001\054\001\055\001\024\001\057\001\058\001\
\059\001\255\255\061\001\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\005\001\061\001\007\001\049\001\050\001\
\051\001\255\255\053\001\255\255\055\001\015\001\255\255\058\001\
\059\001\255\255\061\001\255\255\019\001\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\030\001\028\001\255\255\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\053\001\054\001\055\001\007\001\057\001\
\058\001\059\001\060\001\061\001\255\255\255\255\015\001\062\001\
\255\255\255\255\255\255\001\001\002\001\255\255\255\255\024\001\
\006\001\007\001\008\001\255\255\029\001\011\001\031\001\255\255\
\014\001\255\255\007\001\017\001\255\255\255\255\039\001\255\255\
\255\255\255\255\015\001\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\024\001\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\060\001\061\001\255\255\007\001\255\255\
\255\255\255\255\039\001\255\255\255\255\255\255\015\001\255\255\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\024\001\
\053\001\054\001\055\001\007\001\057\001\058\001\059\001\060\001\
\061\001\255\255\255\255\015\001\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\024\001\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\053\001\054\001\055\001\007\001\
\057\001\058\001\059\001\060\001\061\001\255\255\255\255\015\001\
\255\255\255\255\046\001\047\001\048\001\049\001\050\001\051\001\
\024\001\053\001\054\001\055\001\007\001\057\001\058\001\059\001\
\255\255\061\001\255\255\255\255\015\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\046\001\047\001\
\048\001\049\001\050\001\051\001\255\255\053\001\054\001\055\001\
\007\001\057\001\058\001\059\001\255\255\061\001\255\255\255\255\
\015\001\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\024\001\053\001\054\001\055\001\007\001\057\001\058\001\
\059\001\255\255\061\001\255\255\255\255\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\053\001\054\001\
\055\001\255\255\057\001\058\001\059\001\255\255\061\001\255\255\
\255\255\255\255\255\255\255\255\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\053\001\054\001\055\001\255\255\057\001\
\058\001\059\001\255\255\061\001\001\001\002\001\255\255\255\255\
\255\255\006\001\007\001\008\001\255\255\255\255\011\001\255\255\
\255\255\014\001\255\255\255\255\017\001"

let yynames_const = "\
  EOF\000\
  CALLBACK\000\
  INTERFACE\000\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  PARTIAL\000\
  DICTIONARY\000\
  EQUAL\000\
  EXCEPTION\000\
  COLON\000\
  COMMA\000\
  ENUM\000\
  LRBRACKET\000\
  RRBRACKET\000\
  TYPEDEF\000\
  IMPLEMENTS\000\
  CONST\000\
  NULL\000\
  TRUE\000\
  FALSE\000\
  MINUS\000\
  INFINITY\000\
  NAN\000\
  STRINGIFIER\000\
  ATTRIBUTE\000\
  INHERIT\000\
  READONLY\000\
  GETTER\000\
  SETTER\000\
  CREATOR\000\
  DELETER\000\
  LEGACYCALLER\000\
  OPTIONAL\000\
  ELLIPSIS\000\
  LSBRACKET\000\
  RSBRACKET\000\
  DOT\000\
  LESS\000\
  GREATER\000\
  QUESTION\000\
  DATE\000\
  DOMSTRING\000\
  ANY\000\
  BOOLEAN\000\
  BYTE\000\
  DOUBLE\000\
  FLOAT_TYPE\000\
  LONG\000\
  OBJECT\000\
  OCTET\000\
  OR\000\
  SEQUENCE\000\
  SHORT\000\
  UNSIGNED\000\
  VOID\000\
  UNRESTRICTED\000\
  STATIC\000\
  "

let yynames_block = "\
  IDENTIFIER\000\
  STRING\000\
  INTEGER\000\
  FLOAT\000\
  OTHER\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'definition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.full_definition list) in
    Obj.repr(
# 81 "parser.mly"
                                                   ( (_1, _2) :: _3 )
# 735 "parser.ml"
               : Ast.full_definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
        ( [] )
# 741 "parser.ml"
               : Ast.full_definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'callback_or_interface) in
    Obj.repr(
# 86 "parser.mly"
                          ( _1 )
# 748 "parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'partial) in
    Obj.repr(
# 87 "parser.mly"
            ( _1 )
# 755 "parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dictionary) in
    Obj.repr(
# 88 "parser.mly"
               ( Dictionary _1 )
# 762 "parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exception_rule) in
    Obj.repr(
# 89 "parser.mly"
                   ( ExceptionDef _1 )
# 769 "parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum) in
    Obj.repr(
# 90 "parser.mly"
         ( Enum _1 )
# 776 "parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 91 "parser.mly"
            ( Typedef _1 )
# 783 "parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'implements_statement) in
    Obj.repr(
# 92 "parser.mly"
                         ( ImplementsStatement _1 )
# 790 "parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'callback_rest_or_interface) in
    Obj.repr(
# 96 "parser.mly"
                                        ( _2 )
# 797 "parser.ml"
               : 'callback_or_interface))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'interface) in
    Obj.repr(
# 97 "parser.mly"
              ( Interface _1 )
# 804 "parser.ml"
               : 'callback_or_interface))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'callback_rest) in
    Obj.repr(
# 101 "parser.mly"
                  ( Callback _1 )
# 811 "parser.ml"
               : 'callback_rest_or_interface))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'interface) in
    Obj.repr(
# 102 "parser.mly"
              ( CallbackInterface _1 )
# 818 "parser.ml"
               : 'callback_rest_or_interface))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'inheritance) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'interface_members) in
    Obj.repr(
# 106 "parser.mly"
                                                                        (
    { identifier = _2; members = _5; inheritance = _3 }
  )
# 829 "parser.ml"
               : 'interface))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'partial_definition) in
    Obj.repr(
# 112 "parser.mly"
                             ( _2 )
# 836 "parser.ml"
               : 'partial))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'partial_interface) in
    Obj.repr(
# 116 "parser.mly"
                      ( PartialInterface _1 )
# 843 "parser.ml"
               : 'partial_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'partial_dictionary) in
    Obj.repr(
# 117 "parser.mly"
                       ( PartialDictionary _1 )
# 850 "parser.ml"
               : 'partial_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'interface_members) in
    Obj.repr(
# 121 "parser.mly"
                                                            (
    { identifier = _2; members = _4 }
  )
# 860 "parser.ml"
               : 'partial_interface))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parser.mly"
                ( [] )
# 866 "parser.ml"
               : 'interface_members))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'interface_member) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'interface_members) in
    Obj.repr(
# 128 "parser.mly"
                                                               ( (_1, _2) :: _3 )
# 875 "parser.ml"
               : 'interface_members))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 132 "parser.mly"
          ( ConstInterfaceMember _1 )
# 882 "parser.ml"
               : 'interface_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_or_operation) in
    Obj.repr(
# 133 "parser.mly"
                           ( _1 )
# 889 "parser.ml"
               : 'interface_member))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'inheritance) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'dictionary_members) in
    Obj.repr(
# 137 "parser.mly"
                                                                          (
    { identifier = _2; inheritance = _3; members = _5 }
  )
# 900 "parser.ml"
               : 'dictionary))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                ( [] )
# 906 "parser.ml"
               : 'dictionary_members))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dictionary_member) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dictionary_members) in
    Obj.repr(
# 144 "parser.mly"
                                                                 ( (_1, _2) :: _3 )
# 915 "parser.ml"
               : 'dictionary_members))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'type_rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'default) in
    Obj.repr(
# 148 "parser.mly"
                                    (
    { identifier = _2; member_type = _1; default_value = _3 }
  )
# 926 "parser.ml"
               : 'dictionary_member))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dictionary_members) in
    Obj.repr(
# 154 "parser.mly"
                                                         (
    { identifier = _2; members = _4 }
  )
# 936 "parser.ml"
               : 'partial_dictionary))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                ( None )
# 942 "parser.ml"
               : 'default))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'default_value) in
    Obj.repr(
# 161 "parser.mly"
                        ( Some _2 )
# 949 "parser.ml"
               : 'default))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const_value) in
    Obj.repr(
# 165 "parser.mly"
                ( _1 )
# 956 "parser.ml"
               : 'default_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "parser.mly"
           ( String _1 )
# 963 "parser.ml"
               : 'default_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'inheritance) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exception_members) in
    Obj.repr(
# 170 "parser.mly"
                                                                        (
    { identifier = _2; inheritance = _3; members = _5 }
  )
# 974 "parser.ml"
               : 'exception_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
                ( [] )
# 980 "parser.ml"
               : 'exception_members))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exception_member) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exception_members) in
    Obj.repr(
# 177 "parser.mly"
                                                               ( (_1, _2) :: _3 )
# 989 "parser.ml"
               : 'exception_members))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "parser.mly"
                ( None )
# 995 "parser.ml"
               : 'inheritance))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 182 "parser.mly"
                     ( Some _2 )
# 1002 "parser.ml"
               : 'inheritance))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'enum_value_list) in
    Obj.repr(
# 186 "parser.mly"
                                                     (
    { identifier = _2; members = _4 }
  )
# 1012 "parser.ml"
               : 'enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'enum_values) in
    Obj.repr(
# 192 "parser.mly"
                     ( _1 :: _2 )
# 1020 "parser.ml"
               : 'enum_value_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "parser.mly"
                ( [] )
# 1026 "parser.ml"
               : 'enum_values))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enum_values) in
    Obj.repr(
# 197 "parser.mly"
                             ( _2 :: _3 )
# 1034 "parser.ml"
               : 'enum_values))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'return_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'argument_list) in
    Obj.repr(
# 201 "parser.mly"
                                                                      (
    { identifier = _1; return_type = _3; arguments = _5 }
  )
# 1045 "parser.ml"
               : 'callback_rest))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'extended_attribute_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 207 "parser.mly"
                                                            (
    { attributes = _2; aliased_type = _3; identifier = _4 }
  )
# 1056 "parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 213 "parser.mly"
                                        (
    { child = _1; parent = _3 }
  )
# 1066 "parser.ml"
               : 'implements_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'const_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'const_value) in
    Obj.repr(
# 219 "parser.mly"
                                                     (
    { const_type = _2; identifier = _3; value = _5; }
  )
# 1077 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'boolean_literal) in
    Obj.repr(
# 225 "parser.mly"
                    ( _1 )
# 1084 "parser.ml"
               : 'const_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'float_literal) in
    Obj.repr(
# 226 "parser.mly"
                  ( FloatLiteral _1 )
# 1091 "parser.ml"
               : 'const_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 227 "parser.mly"
            ( Integer _1 )
# 1098 "parser.ml"
               : 'const_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "parser.mly"
         ( Null )
# 1104 "parser.ml"
               : 'const_value))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
         ( True )
# 1110 "parser.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "parser.mly"
          ( False )
# 1116 "parser.ml"
               : 'boolean_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 237 "parser.mly"
          ( FloatValue _1 )
# 1123 "parser.ml"
               : 'float_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "parser.mly"
                   ( MinusInfinity )
# 1129 "parser.ml"
               : 'float_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser.mly"
             ( Infinity )
# 1135 "parser.ml"
               : 'float_literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "parser.mly"
        ( NaN )
# 1141 "parser.ml"
               : 'float_literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stringifier_attribute_or_operation) in
    Obj.repr(
# 244 "parser.mly"
                                                   ( Stringifier )
# 1148 "parser.ml"
               : 'attribute_or_operation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 245 "parser.mly"
              ( InterfaceAttribute _1 )
# 1155 "parser.ml"
               : 'attribute_or_operation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'operation) in
    Obj.repr(
# 246 "parser.mly"
              ( InterfaceOperation _1 )
# 1162 "parser.ml"
               : 'attribute_or_operation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 250 "parser.mly"
              ()
# 1169 "parser.ml"
               : 'stringifier_attribute_or_operation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'operation_rest) in
    Obj.repr(
# 251 "parser.mly"
                   ()
# 1176 "parser.ml"
               : 'stringifier_attribute_or_operation))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "parser.mly"
         ()
# 1182 "parser.ml"
               : 'stringifier_attribute_or_operation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'inherit_rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'read_only) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 256 "parser.mly"
                                                             (
    { inherited = _1; readonly = _2; attrtype = _4; identifier = _5 }
  )
# 1194 "parser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "parser.mly"
                ( false )
# 1200 "parser.ml"
               : 'inherit_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "parser.mly"
            ( true )
# 1206 "parser.ml"
               : 'inherit_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "parser.mly"
                ( false )
# 1212 "parser.ml"
               : 'read_only))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parser.mly"
             ( true )
# 1218 "parser.ml"
               : 'read_only))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'qualifiers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'operation_rest) in
    Obj.repr(
# 272 "parser.mly"
                            (
    { _2 with qualifiers = _1 }
  )
# 1228 "parser.ml"
               : 'operation))
; (fun __caml_parser_env ->
    Obj.repr(
# 278 "parser.mly"
           ( Static )
# 1234 "parser.ml"
               : 'qualifiers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'specials) in
    Obj.repr(
# 279 "parser.mly"
             ( Specials _1 )
# 1241 "parser.ml"
               : 'qualifiers))
; (fun __caml_parser_env ->
    Obj.repr(
# 283 "parser.mly"
                ( [] )
# 1247 "parser.ml"
               : 'specials))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'special) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'specials) in
    Obj.repr(
# 284 "parser.mly"
                     ( _1 :: _2 )
# 1255 "parser.ml"
               : 'specials))
; (fun __caml_parser_env ->
    Obj.repr(
# 288 "parser.mly"
           ( Getter )
# 1261 "parser.ml"
               : 'special))
; (fun __caml_parser_env ->
    Obj.repr(
# 289 "parser.mly"
           ( Setter )
# 1267 "parser.ml"
               : 'special))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "parser.mly"
            ( Creator )
# 1273 "parser.ml"
               : 'special))
; (fun __caml_parser_env ->
    Obj.repr(
# 291 "parser.mly"
            ( Deleter )
# 1279 "parser.ml"
               : 'special))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "parser.mly"
                 ( LegacyCaller )
# 1285 "parser.ml"
               : 'special))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'return_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'optional_identifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'argument_list) in
    Obj.repr(
# 296 "parser.mly"
                                                                         (
    { return_type = _1; identifier = _2; qualifiers = Static; arguments = _4 }
  )
# 1296 "parser.ml"
               : 'operation_rest))
; (fun __caml_parser_env ->
    Obj.repr(
# 302 "parser.mly"
                ( None )
# 1302 "parser.ml"
               : 'optional_identifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 303 "parser.mly"
               ( Some _1 )
# 1309 "parser.ml"
               : 'optional_identifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 307 "parser.mly"
                ( [] )
# 1315 "parser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'argument) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arguments) in
    Obj.repr(
# 308 "parser.mly"
                       ( _1 :: _2 )
# 1323 "parser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "parser.mly"
                ( [] )
# 1329 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'argument) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments) in
    Obj.repr(
# 313 "parser.mly"
                             ( _2 :: _3 )
# 1337 "parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'extended_attribute_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_or_required_argument) in
    Obj.repr(
# 317 "parser.mly"
                                                        (
    (_1, _2)
  )
# 1347 "parser.ml"
               : 'argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'argument_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'default) in
    Obj.repr(
# 323 "parser.mly"
                                             (
      OptionalArgument {
        default_value = _4;
        argtype = _2;
        name = _3;
      }
             )
# 1362 "parser.ml"
               : 'optional_or_required_argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ellipsis) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argument_name) in
    Obj.repr(
# 330 "parser.mly"
                                     (
      if _2
      then RestArgument { name = _3; argtype = _1 }
      else RequiredArgument { name = _3; argtype = _1 }
    )
# 1375 "parser.ml"
               : 'optional_or_required_argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument_name_keyword) in
    Obj.repr(
# 338 "parser.mly"
                          ( _1 )
# 1382 "parser.ml"
               : 'argument_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 339 "parser.mly"
               ( _1 )
# 1389 "parser.ml"
               : 'argument_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "parser.mly"
                ( true )
# 1395 "parser.ml"
               : 'ellipsis))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "parser.mly"
             ( false )
# 1401 "parser.ml"
               : 'ellipsis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 348 "parser.mly"
          ( ConstExceptionMember _1 )
# 1408 "parser.ml"
               : 'exception_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exception_field) in
    Obj.repr(
# 349 "parser.mly"
                    ( ExceptionField _1 )
# 1415 "parser.ml"
               : 'exception_member))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 353 "parser.mly"
                            (
    { identifier = _2; exception_type = _1 }
  )
# 1425 "parser.ml"
               : 'exception_field))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "parser.mly"
                ( [] )
# 1431 "parser.ml"
               : 'extended_attribute_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'extended_attributes) in
    Obj.repr(
# 360 "parser.mly"
                                                               ( [] )
# 1439 "parser.ml"
               : 'extended_attribute_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 364 "parser.mly"
                ( [] )
# 1445 "parser.ml"
               : 'extended_attributes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'extended_attribute) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attributes) in
    Obj.repr(
# 365 "parser.mly"
                                                 ( _2 :: _3 )
# 1453 "parser.ml"
               : 'extended_attributes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_inner) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_rest) in
    Obj.repr(
# 369 "parser.mly"
                                                                         ()
# 1461 "parser.ml"
               : 'extended_attribute))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_inner) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_rest) in
    Obj.repr(
# 370 "parser.mly"
                                                                         ()
# 1469 "parser.ml"
               : 'extended_attribute))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_inner) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_rest) in
    Obj.repr(
# 371 "parser.mly"
                                                                   ()
# 1477 "parser.ml"
               : 'extended_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'other) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_rest) in
    Obj.repr(
# 372 "parser.mly"
                                  ()
# 1485 "parser.ml"
               : 'extended_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 376 "parser.mly"
                ( )
# 1491 "parser.ml"
               : 'extended_attribute_rest))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute) in
    Obj.repr(
# 377 "parser.mly"
                       ()
# 1498 "parser.ml"
               : 'extended_attribute_rest))
; (fun __caml_parser_env ->
    Obj.repr(
# 381 "parser.mly"
                ( [] )
# 1504 "parser.ml"
               : 'extended_attribute_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_inner) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_inner) in
    Obj.repr(
# 382 "parser.mly"
                                                                          ( [] )
# 1512 "parser.ml"
               : 'extended_attribute_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_inner) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_inner) in
    Obj.repr(
# 383 "parser.mly"
                                                                          ( [] )
# 1520 "parser.ml"
               : 'extended_attribute_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extended_attribute_inner) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_inner) in
    Obj.repr(
# 384 "parser.mly"
                                                                    ( [] )
# 1528 "parser.ml"
               : 'extended_attribute_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'other_or_comma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_inner) in
    Obj.repr(
# 385 "parser.mly"
                                            ( [] )
# 1536 "parser.ml"
               : 'extended_attribute_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 389 "parser.mly"
            ()
# 1543 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 390 "parser.mly"
          ()
# 1550 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 391 "parser.mly"
               ()
# 1557 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 392 "parser.mly"
           ()
# 1564 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 393 "parser.mly"
          ()
# 1571 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 394 "parser.mly"
          ()
# 1577 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 395 "parser.mly"
        ()
# 1583 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 396 "parser.mly"
          ()
# 1589 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 397 "parser.mly"
         ()
# 1595 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 398 "parser.mly"
         ()
# 1601 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 399 "parser.mly"
          ()
# 1607 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 400 "parser.mly"
            ()
# 1613 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 401 "parser.mly"
             ()
# 1619 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 402 "parser.mly"
         ()
# 1625 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 403 "parser.mly"
              ()
# 1631 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 404 "parser.mly"
             ()
# 1637 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 405 "parser.mly"
        ()
# 1643 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 406 "parser.mly"
        ()
# 1649 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 407 "parser.mly"
            ()
# 1655 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "parser.mly"
         ()
# 1661 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 409 "parser.mly"
           ()
# 1667 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 410 "parser.mly"
          ()
# 1673 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 411 "parser.mly"
               ()
# 1679 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 412 "parser.mly"
         ()
# 1685 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 413 "parser.mly"
         ()
# 1691 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 414 "parser.mly"
           ()
# 1697 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 415 "parser.mly"
          ()
# 1703 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 416 "parser.mly"
       ()
# 1709 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 417 "parser.mly"
             ()
# 1715 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 418 "parser.mly"
             ()
# 1721 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 419 "parser.mly"
          ()
# 1727 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "parser.mly"
         ()
# 1733 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 421 "parser.mly"
             ()
# 1739 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 422 "parser.mly"
         ()
# 1745 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument_name_keyword) in
    Obj.repr(
# 423 "parser.mly"
                          ()
# 1752 "parser.ml"
               : 'other))
; (fun __caml_parser_env ->
    Obj.repr(
# 427 "parser.mly"
              ( "attribute" )
# 1758 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 428 "parser.mly"
             ( "callback" )
# 1764 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 429 "parser.mly"
          ( "const" )
# 1770 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 430 "parser.mly"
            ( "creator" )
# 1776 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 431 "parser.mly"
            ( "deleter" )
# 1782 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 432 "parser.mly"
               ( "dictionary" )
# 1788 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 433 "parser.mly"
         ( "enum" )
# 1794 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 434 "parser.mly"
              ( "exception" )
# 1800 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 435 "parser.mly"
           ( "getter" )
# 1806 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 436 "parser.mly"
               ( "implements" )
# 1812 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 437 "parser.mly"
            ( "inherit" )
# 1818 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 438 "parser.mly"
              ( "interface" )
# 1824 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 439 "parser.mly"
                 ( "legacycaller" )
# 1830 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 440 "parser.mly"
            ( "partial" )
# 1836 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 441 "parser.mly"
           ( "setter" )
# 1842 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 442 "parser.mly"
           ( "static" )
# 1848 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "parser.mly"
                ( "strinifier" )
# 1854 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 444 "parser.mly"
            ( "typedef" )
# 1860 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    Obj.repr(
# 445 "parser.mly"
                 ( "unrestricted" )
# 1866 "parser.ml"
               : 'argument_name_keyword))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'other) in
    Obj.repr(
# 449 "parser.mly"
          ()
# 1873 "parser.ml"
               : 'other_or_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "parser.mly"
          ()
# 1879 "parser.ml"
               : 'other_or_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'single_type) in
    Obj.repr(
# 454 "parser.mly"
                ( _1 )
# 1886 "parser.ml"
               : 'type_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'union_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 455 "parser.mly"
                           ( (UnionType _1), _2 )
# 1894 "parser.ml"
               : 'type_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_any_type) in
    Obj.repr(
# 459 "parser.mly"
                 ( _1 )
# 1901 "parser.ml"
               : 'single_type))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 460 "parser.mly"
                                        ( AnyArray, _4 )
# 1908 "parser.ml"
               : 'single_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 464 "parser.mly"
                ( [] )
# 1914 "parser.ml"
               : 'union_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'union_member_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'union_member_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'union_member_types) in
    Obj.repr(
# 465 "parser.mly"
                                                                                  (
    _2 :: _4 :: _5
  )
# 1925 "parser.ml"
               : 'union_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_any_type) in
    Obj.repr(
# 471 "parser.mly"
                 ( _1 )
# 1932 "parser.ml"
               : 'union_member_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'union_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 472 "parser.mly"
                           ( UnionType _1, _2 )
# 1940 "parser.ml"
               : 'union_member_type))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 473 "parser.mly"
                                        ( AnyArray, _4 )
# 1947 "parser.ml"
               : 'union_member_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 477 "parser.mly"
                ( [] )
# 1953 "parser.ml"
               : 'union_member_types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'union_member_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'union_member_types) in
    Obj.repr(
# 478 "parser.mly"
                                            ( _2 :: _3 )
# 1961 "parser.ml"
               : 'union_member_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primitive_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 482 "parser.mly"
                               ( Primitive _1, _2 )
# 1969 "parser.ml"
               : 'non_any_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 483 "parser.mly"
                          ( DomString, _2 )
# 1976 "parser.ml"
               : 'non_any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 484 "parser.mly"
                           ( Identifier _1, _2 )
# 1984 "parser.ml"
               : 'non_any_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_rule) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'null) in
    Obj.repr(
# 485 "parser.mly"
                                         ( Sequence (_3, _5), [] )
# 1992 "parser.ml"
               : 'non_any_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 486 "parser.mly"
                       ( Object, _2 )
# 1999 "parser.ml"
               : 'non_any_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 487 "parser.mly"
                     ( Date, _2 )
# 2006 "parser.ml"
               : 'non_any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'primitive_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'null) in
    Obj.repr(
# 491 "parser.mly"
                        ( PrimitiveType (_1, _2) )
# 2014 "parser.ml"
               : 'const_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'null) in
    Obj.repr(
# 492 "parser.mly"
                    ( UserType (_1, _2) )
# 2022 "parser.ml"
               : 'const_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_integer_type) in
    Obj.repr(
# 496 "parser.mly"
                          ( _1 )
# 2029 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unrestricted_float_type) in
    Obj.repr(
# 497 "parser.mly"
                            ( _1 )
# 2036 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 498 "parser.mly"
            ( Boolean )
# 2042 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 499 "parser.mly"
         ( Byte )
# 2048 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 500 "parser.mly"
          ( Octet )
# 2054 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'float_type) in
    Obj.repr(
# 504 "parser.mly"
                            (
      match _2 with
      | Float -> UFloat
      | Double -> UDouble
      | _ -> failwith "not float type"
    )
# 2066 "parser.ml"
               : 'unrestricted_float_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'float_type) in
    Obj.repr(
# 510 "parser.mly"
               ( _1 )
# 2073 "parser.ml"
               : 'unrestricted_float_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 514 "parser.mly"
          ( Float )
# 2080 "parser.ml"
               : 'float_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 515 "parser.mly"
           ( Double )
# 2086 "parser.ml"
               : 'float_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'integer_type) in
    Obj.repr(
# 519 "parser.mly"
                          (
      match _2 with
      | Short -> UShort
      | Long -> ULong
      | LongLong -> ULongLong
      | _ -> failwith "not integer type"
    )
# 2099 "parser.ml"
               : 'unsigned_integer_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'integer_type) in
    Obj.repr(
# 526 "parser.mly"
                 ( _1 )
# 2106 "parser.ml"
               : 'unsigned_integer_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 530 "parser.mly"
          ( Short )
# 2112 "parser.ml"
               : 'integer_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_long) in
    Obj.repr(
# 531 "parser.mly"
                       ( if _2 then LongLong else Long )
# 2119 "parser.ml"
               : 'integer_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 535 "parser.mly"
                ( false )
# 2125 "parser.ml"
               : 'optional_long))
; (fun __caml_parser_env ->
    Obj.repr(
# 536 "parser.mly"
         ( true )
# 2131 "parser.ml"
               : 'optional_long))
; (fun __caml_parser_env ->
    Obj.repr(
# 540 "parser.mly"
                ( [] )
# 2137 "parser.ml"
               : 'type_suffix))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix_starting_with_array) in
    Obj.repr(
# 541 "parser.mly"
                                             ( Optional :: _2 )
# 2144 "parser.ml"
               : 'type_suffix))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 542 "parser.mly"
                                    ( Array :: _3 )
# 2151 "parser.ml"
               : 'type_suffix))
; (fun __caml_parser_env ->
    Obj.repr(
# 546 "parser.mly"
                ( [] )
# 2157 "parser.ml"
               : 'type_suffix_starting_with_array))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_suffix) in
    Obj.repr(
# 547 "parser.mly"
                                    ( Array :: _3 )
# 2164 "parser.ml"
               : 'type_suffix_starting_with_array))
; (fun __caml_parser_env ->
    Obj.repr(
# 551 "parser.mly"
                ( false )
# 2170 "parser.ml"
               : 'null))
; (fun __caml_parser_env ->
    Obj.repr(
# 552 "parser.mly"
             ( true )
# 2176 "parser.ml"
               : 'null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_rule) in
    Obj.repr(
# 556 "parser.mly"
              ( NonVoid _1 )
# 2183 "parser.ml"
               : 'return_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 557 "parser.mly"
         ( Void )
# 2189 "parser.ml"
               : 'return_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 561 "parser.mly"
             ()
# 2196 "parser.ml"
               : 'extended_attribute_no_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'argument_list) in
    Obj.repr(
# 565 "parser.mly"
                                               ()
# 2204 "parser.ml"
               : 'extended_attribute_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 569 "parser.mly"
                              ()
# 2212 "parser.ml"
               : 'extended_attribute_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'argument_list) in
    Obj.repr(
# 573 "parser.mly"
                                                                ()
# 2221 "parser.ml"
               : 'extended_attribute_named_arg_list))
(* Entry definitions *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let definitions (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.full_definition list)
;;
# 577 "parser.mly"

# 2248 "parser.ml"
